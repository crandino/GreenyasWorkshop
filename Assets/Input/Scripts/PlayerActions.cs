//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/SubSystems/Input/Actions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""efbf25df-eb57-4b89-a638-f08faa3c87e4"",
            ""actions"": [
                {
                    ""name"": ""TilePlacement"",
                    ""type"": ""Button"",
                    ""id"": ""41b182b0-4e38-4a31-9f60-4652c45aed0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotatePiece"",
                    ""type"": ""Value"",
                    ""id"": ""a2ff521e-4189-4b87-920d-d39489e0c31a"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelTilePlacement"",
                    ""type"": ""Button"",
                    ""id"": ""36cabe02-515d-433f-a9fc-6d5f2769682b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ec2d7f3-53d3-445b-b09f-2ccee67096d5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TilePlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c56c9e3-17e2-4b8b-9385-cb45dfac7de4"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6f4da62-2b51-4f15-8634-859ee49fc4c4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelTilePlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_TilePlacement = m_InGame.FindAction("TilePlacement", throwIfNotFound: true);
        m_InGame_RotatePiece = m_InGame.FindAction("RotatePiece", throwIfNotFound: true);
        m_InGame_CancelTilePlacement = m_InGame.FindAction("CancelTilePlacement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
    private readonly InputAction m_InGame_TilePlacement;
    private readonly InputAction m_InGame_RotatePiece;
    private readonly InputAction m_InGame_CancelTilePlacement;
    public struct InGameActions
    {
        private @PlayerActions m_Wrapper;
        public InGameActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TilePlacement => m_Wrapper.m_InGame_TilePlacement;
        public InputAction @RotatePiece => m_Wrapper.m_InGame_RotatePiece;
        public InputAction @CancelTilePlacement => m_Wrapper.m_InGame_CancelTilePlacement;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
            @TilePlacement.started += instance.OnTilePlacement;
            @TilePlacement.performed += instance.OnTilePlacement;
            @TilePlacement.canceled += instance.OnTilePlacement;
            @RotatePiece.started += instance.OnRotatePiece;
            @RotatePiece.performed += instance.OnRotatePiece;
            @RotatePiece.canceled += instance.OnRotatePiece;
            @CancelTilePlacement.started += instance.OnCancelTilePlacement;
            @CancelTilePlacement.performed += instance.OnCancelTilePlacement;
            @CancelTilePlacement.canceled += instance.OnCancelTilePlacement;
        }

        private void UnregisterCallbacks(IInGameActions instance)
        {
            @TilePlacement.started -= instance.OnTilePlacement;
            @TilePlacement.performed -= instance.OnTilePlacement;
            @TilePlacement.canceled -= instance.OnTilePlacement;
            @RotatePiece.started -= instance.OnRotatePiece;
            @RotatePiece.performed -= instance.OnRotatePiece;
            @RotatePiece.canceled -= instance.OnRotatePiece;
            @CancelTilePlacement.started -= instance.OnCancelTilePlacement;
            @CancelTilePlacement.performed -= instance.OnCancelTilePlacement;
            @CancelTilePlacement.canceled -= instance.OnCancelTilePlacement;
        }

        public void RemoveCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActions @InGame => new InGameActions(this);
    public interface IInGameActions
    {
        void OnTilePlacement(InputAction.CallbackContext context);
        void OnRotatePiece(InputAction.CallbackContext context);
        void OnCancelTilePlacement(InputAction.CallbackContext context);
    }
}
